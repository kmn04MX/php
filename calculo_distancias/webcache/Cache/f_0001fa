var idioma_esp = {
  processing: "Procesando...",
  lengthMenu: "Mostrar _MENU_ registros",
  zeroRecords: "No se encontraron resultados",
  emptyTable: "Ningún dato disponible en esta tabla",
  infoEmpty: "Mostrando registros del 0 al 0 de un total de 0 registros",
  infoFiltered: "(filtrado de un total de _MAX_ registros)",
  search: "Buscar:",
  infoThousands: ",",
  loadingRecords: "Cargando...",
  paginate: {
    first: "Primero",
    last: "Último",
    next: "Siguiente",
    previous: "Anterior",
  },
  aria: {
    sortAscending: ": Activar para ordenar la columna de manera ascendente",
    sortDescending:
      ": Activar para ordenar la columna de manera descendente",
  },
  buttons: {
    copy: "Copiar",
    colvis: "Visibilidad",
    collection: "Colección",
    colvisRestore: "Restaurar visibilidad",
    copyKeys:
      "Presione ctrl o u2318 + C para copiar los datos de la tabla al portapapeles del sistema. <br /> <br /> Para cancelar, haga clic en este mensaje o presione escape.",
    copySuccess: {
      1: "Copiada 1 fila al portapapeles",
      _: "Copiadas %ds fila al portapapeles",
    },
    copyTitle: "Copiar al portapapeles",
    csv: "CSV",
    excel: "Excel",
    pageLength: {
      "-1": "Mostrar todas las filas",
      _: "Mostrar %d filas",
    },
    pdf: "PDF",
    print: "Imprimir",
    renameState: "Cambiar nombre",
    updateState: "Actualizar",
    createState: "Crear Estado",
    removeAllStates: "Remover Estados",
    removeState: "Remover",
    savedStates: "Estados Guardados",
    stateRestore: "Estado %d",
  },
  autoFill: {
    cancel: "Cancelar",
    fill: "Rellene todas las celdas con <i>%d</i>",
    fillHorizontal: "Rellenar celdas horizontalmente",
    fillVertical: "Rellenar celdas verticalmentemente",
  },
  decimal: ",",
  searchBuilder: {
    add: "Añadir condición",
    button: {
      0: "Constructor de búsqueda",
      _: "Constructor de búsqueda (%d)",
    },
    clearAll: "Borrar todo",
    condition: "Condición",
    conditions: {
      date: {
        after: "Despues",
        before: "Antes",
        between: "Entre",
        empty: "Vacío",
        equals: "Igual a",
        notBetween: "No entre",
        notEmpty: "No Vacio",
        not: "Diferente de",
      },
      number: {
        between: "Entre",
        empty: "Vacio",
        equals: "Igual a",
        gt: "Mayor a",
        gte: "Mayor o igual a",
        lt: "Menor que",
        lte: "Menor o igual que",
        notBetween: "No entre",
        notEmpty: "No vacío",
        not: "Diferente de",
      },
      string: {
        contains: "Contiene",
        empty: "Vacío",
        endsWith: "Termina en",
        equals: "Igual a",
        notEmpty: "No Vacio",
        startsWith: "Empieza con",
        not: "Diferente de",
        notContains: "No Contiene",
        notStartsWith: "No empieza con",
        notEndsWith: "No termina con",
      },
      array: {
        not: "Diferente de",
        equals: "Igual",
        empty: "Vacío",
        contains: "Contiene",
        notEmpty: "No Vacío",
        without: "Sin",
      },
    },
    data: "Data",
    deleteTitle: "Eliminar regla de filtrado",
    leftTitle: "Criterios anulados",
    logicAnd: "Y",
    logicOr: "O",
    rightTitle: "Criterios de sangría",
    title: {
      0: "Constructor de búsqueda",
      _: "Constructor de búsqueda (%d)",
    },
    value: "Valor",
  },
  searchPanes: {
    clearMessage: "Borrar todo",
    collapse: {
      0: "Paneles de búsqueda",
      _: "Paneles de búsqueda (%d)",
    },
    count: "{total}",
    countFiltered: "{shown} ({total})",
    emptyPanes: "Sin paneles de búsqueda",
    loadMessage: "Cargando paneles de búsqueda",
    title: "Filtros Activos - %d",
    showMessage: "Mostrar Todo",
    collapseMessage: "Colapsar Todo",
  },
  select: {
    cells: {
      1: "1 celda seleccionada",
      _: "%d celdas seleccionadas",
    },
    columns: {
      1: "1 columna seleccionada",
      _: "%d columnas seleccionadas",
    },
    rows: {
      1: "1 fila seleccionada",
      _: "%d filas seleccionadas",
    },
  },
  thousands: ".",
  datetime: {
    previous: "Anterior",
    next: "Proximo",
    hours: "Horas",
    minutes: "Minutos",
    seconds: "Segundos",
    unknown: "-",
    amPm: ["AM", "PM"],
    months: {
      0: "Enero",
      1: "Febrero",
      10: "Noviembre",
      11: "Diciembre",
      2: "Marzo",
      3: "Abril",
      4: "Mayo",
      5: "Junio",
      6: "Julio",
      7: "Agosto",
      8: "Septiembre",
      9: "Octubre",
    },
    weekdays: ["Dom", "Lun", "Mar", "Mie", "Jue", "Vie", "Sab"],
  },
  editor: {
    close: "Cerrar",
    create: {
      button: "Nuevo",
      title: "Crear Nuevo Registro",
      submit: "Crear",
    },
    edit: {
      button: "Editar",
      title: "Editar Registro",
      submit: "Actualizar",
    },
    remove: {
      button: "Eliminar",
      title: "Eliminar Registro",
      submit: "Eliminar",
      confirm: {
        _: "¿Está seguro que desea eliminar %d filas?",
        1: "¿Está seguro que desea eliminar 1 fila?",
      },
    },
    error: {
      system:
        'Ha ocurrido un error en el sistema (<a target="\\" rel="\\ nofollow" href="\\">Más información&lt;\\/a&gt;).</a>',
    },
    multi: {
      title: "Múltiples Valores",
      info: "Los elementos seleccionados contienen diferentes valores para este registro. Para editar y establecer todos los elementos de este registro con el mismo valor, hacer click o tap aquí, de lo contrario conservarán sus valores individuales.",
      restore: "Deshacer Cambios",
      noMulti:
        "Este registro puede ser editado individualmente, pero no como parte de un grupo.",
    },
  },
  info: "Mostrando _START_ a _END_ de _TOTAL_ registros",
  stateRestore: {
    creationModal: {
      button: "Crear",
      name: "Nombre:",
      order: "Clasificación",
      paging: "Paginación",
      search: "Busqueda",
      select: "Seleccionar",
      columns: {
        search: "Búsqueda de Columna",
        visible: "Visibilidad de Columna",
      },
      title: "Crear Nuevo Estado",
      toggleLabel: "Incluir:",
    },
    emptyError: "El nombre no puede estar vacio",
    removeConfirm: "¿Seguro que quiere eliminar este %s?",
    removeError: "Error al eliminar el registro",
    removeJoiner: "y",
    removeSubmit: "Eliminar",
    renameButton: "Cambiar Nombre",
    renameLabel: "Nuevo nombre para %s",
    duplicateError: "Ya existe un Estado con este nombre.",
    emptyStates: "No hay Estados guardados",
    removeTitle: "Remover Estado",
    renameTitle: "Cambiar Nombre Estado",
  },
};

$(document).ready(function () {

  let dataTableOptions = {
    buttons: [
      {
        extend: "excelHtml5",
        text: '<i class="fas fa-file-excel"></i> ',
        titleAttr: "Exportar a Excel",
        className: "btn btn-success",
      },
      /*{
                extend: 'pdfHtml5',
                text: '<i class="fas fa-file-pdf"></i> ',
                titleAttr: 'Exportar a PDF',
                className: 'btn btn-danger',
            },
            /*{
                extend: 'print',
                text: '<i class="fa fa-print"></i> ',
                titleAttr: 'Imprimir',
                className: 'btn btn-info',
            },*/
    ],
    lengthMenu: [20, 50, 100, 500],
    columns: [
      { "data": "numeroPoliza" },
      {
        "data": "fechaReporte",
        render: function (row, data, index) {
          epochTofecha = epochToJsDate(row);
          return epochTofecha;
        },
      },
      { "data": "folioAsignacion" },
      { "data": "cuentaEspecial" },
      { "data": "clienteVip" },
      { "data": "codigoSiniestro" },
      { "data": "nombreReportante" },
      { "data": "apellidoPaternoReportante" },
      { "data": "apellidoMaternoReportante" },
      { "data": "numeroContacto" },
      { "data": "email" },
      { "data": "horaReporte" },
      { "data": "folioInternoGNP" },
      { "defaultContent": "<div class ='d-flex justify-content-center'><button class='btn btn-sm btn-warning' data-bs-toggle='modal' data-bs-target='#sendData'><i class='fa-solid fa-pencil'></i></button></div>" },
    ],
    columnDefs: [
      { className: "centered", targets: "_all" },
      { orderable: false, targets: "_all" },
    ],
    pageLength: 30,
    scrollX: true,
    scrollY: 350,
    destroy: true,
    language: idioma_esp
  };

  $("#tbServiciosAsignados").DataTable(dataTableOptions);
  let estatus = $("#estatus").val();
  console.log(estatus);
  if (estatus != "AS") {
    listarAsignadoByEstatus(estatus);
  } else {
    listarAsignados();
  }

  $("#sendFolio").click(aginacionEstatus);

  function listarAsignados() {
    $.ajax({
      url: "../app/controllers/asignados_controller.php",
      type: "GET",
      dataType: "JSON",
      async: true,
      beforeSend: function (data) {
        setTimeout(function () {
          $("body").addClass("loaded");
        });
      },

      success: function (data) {
        console.log(data.data);

        if (!data.data.length) {
          alert("No se encontraron servicios asignados");
        } else {
          $("#tbServiciosAsignados").DataTable({
            dom: 'Bfrtip',
            buttons: [
              {
                extend: "excelHtml5",
                text: '<i class="fas fa-file-excel"></i> ',
                titleAttr: "Exportar a Excel",
                className: "btn btn-success",
              },
              /*{
                        extend: 'pdfHtml5',
                        text: '<i class="fas fa-file-pdf"></i> ',
                        titleAttr: 'Exportar a PDF',
                        className: 'btn btn-danger',
                    },
                    /*{
                        extend: 'print',
                        text: '<i class="fa fa-print"></i> ',
                        titleAttr: 'Imprimir',
                        className: 'btn btn-info',
                    },*/
            ],
            lengthMenu: [20, 50, 100, 500],
            data: data.data,
            columns: [
              { "data": "numeroPoliza" },
              {
                "data": "fechaReporte",
                render: function (row, data, index) {
                  epochTofecha = epochToJsDate(row);
                  return epochTofecha;
                },
              },
              { "data": "folioAsignacion" },
              { "data": "cuentaEspecial" },
              { "data": "clienteVip" },
              { "data": "codigoSiniestro" },
              { "data": "nombreReportante" },
              { "data": "apellidoPaternoReportante" },
              { "data": "apellidoMaternoReportante" },
              { "data": "numeroContacto" },
              { "data": "email" },
              { "data": "horaReporte" },
              { "data": "folioInternoGNP" },
              { "defaultContent": "<div class ='d-flex justify-content-center'><button class='btn btn-sm btn-warning'><i class='fa-solid fa-pencil'></i></button></div>" },
            ],
            columnDefs: [
              { className: "centered", targets: "_all" },
              { orderable: false, targets: "_all" },
            ],
            pageLength: 30,
            scrollX: true,
            scrollY: 310,
            destroy: true,
            language: idioma_esp
          });
        }
      },
      error: function (e) {
        alert(e.value);
        console.log(e);
      },
    });
  }

  function listarAsignadoByEstatus(estatus) {
    //let estatus = $("#estatus").val();
    var parametros = {
      estatus: estatus,
    };
    //console.log(parametros);
    $.ajax({
      url: "../app/controllers/estatus_controller.php",
      type: "POST",
      dataType: "JSON",
      data: { datos: JSON.stringify(parametros.estatus) },
      async: true,
      beforeSend: function (data) {
        setTimeout(function () {
          $("body").addClass("loaded");
        });
      },

      success: function (data) {
        if (!data.data.length) {
          switch (estatus) {
            case "CO":
              alert("No se encontraron servicios confirmados");
              break;
            case "EA":
              alert("No se encontraron servicios en atencion");
              break;
            case "AR":
              alert("No se encontraron servicios con arribo");
              break;
            case "IC":
              alert("No se encontraron servicios incompletos");
              break;
            case "TE":
              alert("No se encontraron servicios terminados");
              break;
            default:
              alert("No se encontraron servicios confirmados");
              break;
          }
        } else {
          //arrayDatos = Object.values(data.data);
          //consumoAsistencia(arrayDatos);
          $("#tbServiciosAsignados").DataTable({
            dom: 'Bflrtip',
            buttons: [
              {
                extend: "excelHtml5",
                text: '<i class="fas fa-file-excel"></i> ',
                titleAttr: "Exportar a Excel",
                className: "btn btn-success",
              },
              /*{
                        extend: 'pdfHtml5',
                        text: '<i class="fas fa-file-pdf"></i> ',
                        titleAttr: 'Exportar a PDF',
                        className: 'btn btn-danger',
                    },
                    /*{
                        extend: 'print',
                        text: '<i class="fa fa-print"></i> ',
                        titleAttr: 'Imprimir',
                        className: 'btn btn-info',
                    },*/
            ],
            lengthMenu: [20, 50, 100, 500],
            data: data.data,
            columns: [
              { "data": "numeroPoliza" },
              {
                "data": "fechaReporte",
                render: function (row, data, index) {
                  epochTofecha = epochToJsDate(row);
                  return epochTofecha;
                },
              },
              { "data": "folioAsignacion" },
              { "data": "cuentaEspecial" },
              { "data": "clienteVip" },
              { "data": "codigoSiniestro" },
              { "data": "nombreReportante" },
              { "data": "apellidoPaternoReportante" },
              { "data": "apellidoMaternoReportante" },
              { "data": "numeroContacto" },
              { "data": "email" },
              { "data": "horaReporte" },
              { "data": "folioInternoGNP" },
              { "defaultContent": "<div class ='d-flex justify-content-center'><button class='btn btn-sm btn-warning' data-bs-toggle='modal' data-bs-target='#sendData'><i class='fa-solid fa-pencil'></i></button></div>" },
            ],
            columnDefs: [
              { className: "centered", targets: "_all" },
              { orderable: false, targets: "_all" },
            ],
            pageLength: 30,
            scrollX: true,
            scrollY: 310,
            destroy: true,
            language: idioma_esp
          });
        }
      },
      error: function (e) {
        console.log(e);
      },
    });
  }

  function aginacionEstatus() {

    let folioGNP = $("#folioGNPNotify").val();
    let fecha = $("#fechaNotify").val();
    let estatus = $("#asigancion").val();
    let estatusActual = $("#estatus").val();

    let parametros = {
      folioGNP: folioGNP,
      fecha: jsDateToEpoch(fecha),
      estatus: estatus,
      estatusActual: estatusActual
    };

    $.ajax({
      url: "../app/controllers/cambiar_estatus.php",
      type: "POST",
      dataType: "JSON",
      data: { datos: JSON.stringify(parametros) },
      async: true,
      beforeSend: function (data) { },

      success: function (data) {
        emailIcon = document.querySelector(".fa-circle-check");
        if (data.error == 1) {
          let btn = document.querySelector("#sendFolio");
          alert(data.mensaje);
          btn.disabled = false;

        } else {
          let btn = document.querySelector("#sendFolio");
          $("#respuestaAWS").show();

          if (data.folioAsignacion != null && data.folioInternoGNP != null) {
            respAWS.innerHTNL(data.mensaje);
            btn.disabled = true;
            emailIcon.style.color = "#4bb543";
            $('#tbServiciosAsignados').DataTable().ajax.reload();
          } else {
            respAWS.innerHTNL(data.mensaje);
            btn.disabled = false;
            emailIcon.classList.replace("fa-circle-check", "fa-circle-xmark");
            emailIcon.style.color = "#de0611";
          }

        }
      },
      error: function (e) {
        console.log(e);
      },
    });
  }

  $(document).on("click", ".btn-warning", function () {
    console.log("se presiono boton s4");
    $("#seccion3").show();
    fila = $(this).closest("tr");
    folioAsig = fila.find("td:eq(2)").text();

    let parametros = {
      folioAsignacion: folioAsig,
    };

    $.ajax({
      url: "../app/controllers/detalle_controller.php",
      type: "POST",
      dataType: "JSON",
      data: { datos: JSON.stringify(parametros.folioAsignacion) },
      async: true,
      beforeSend: function (data) { },

      success: function (data) {
        let dataFolio = data.data;
        console.log(dataFolio);
        //seccion de datos Area 3 pantalla de seguimiento GNP
        $("#foasignacion").val(
          dataFolio.folioAsignacion != null ? dataFolio.folioAsignacion : "---"
        );
        $("#foInGNP").val(
          dataFolio.folioInternoGNP != null ? dataFolio.folioInternoGNP : "---"
        );
        $("#cuEspecial").val(
          dataFolio.cuentaEspecial != null ? dataFolio.cuentaEspecial : "---"
        );
        $("#clVip").val(
          dataFolio.clienteVip != null ? dataFolio.clienteVip : "---"
        );
        $("#cdSini").val(
          dataFolio.codigoSiniestro != null ? dataFolio.codigoSiniestro : "---"
        );
        $("#numPolicy").val(
          dataFolio.numeroPoliza != null ? dataFolio.numeroPoliza : "---"
        );
        $("#numContact").val(
          dataFolio.numeroContacto != null ? dataFolio.numeroContacto : "---"
        );
        $("#personRep").val(
          nombreReport + apellidoPatReport + apellidoMatReport
        );
        $("#nameReport").val(
          dataFolio.nombreReportante != null
            ? dataFolio.nombreReportante
            : "---"
        );
        $("#email").val(dataFolio.email != null ? dataFolio.email : "---");
        $("#dateReport").val(
          epochToJsDate(
            dataFolio.fechaReporte != null ? dataFolio.fechaReporte : "---"
          )
        );
        $("#hrReport").val(
          dataFolio.horaReporte != null ? dataFolio.horaReporte : "---"
        );
        $("#typeService").val(
          dataFolio.tipoServicio != null ? dataFolio.tipoServicio : "---"
        );
        $("#statusService").val(
          dataFolio.estatusServicio != null ? dataFolio.estatusServicio : "---"
        );
        $("#reUbicado").val(
          dataFolio.esReubicado != null ? dataFolio.esReubicado : "---"
        );
        $("#dateReubicacdo").val(
          dataFolio.fechaHoraReubicacion != null
            ? dataFolio.fechaHoraReubicacion
            : "---"
        );

        ////seccion de datos Area 3 detalles vehiculo pantalla de seguimiento GNP
        $("#typeVe").val(
          dataFolio.vehiculo.tipoVehiculo != null
            ? dataFolio.vehiculo.tipoVehiculo
            : "---"
        );
        $("#Marca").val(
          dataFolio.vehiculo.marca != null ? dataFolio.vehiculo.marca : "---"
        );
        $("#descripcionVe").val(
          dataFolio.vehiculo.descripcionVehiculo != null
            ? dataFolio.vehiculo.descripcionVehiculo
            : "---"
        );
        $("#modVe").val(
          dataFolio.vehiculo.modelo != null ? dataFolio.vehiculo.modelo : "---"
        );
        $("#numSerie").val(
          dataFolio.vehiculo.numeroSerie != null
            ? dataFolio.vehiculo.numeroSerie
            : "---"
        );
        $("#placas").val(
          dataFolio.vehiculo.placas != null ? dataFolio.vehiculo.placas : "---"
        );
        $("#color").val(
          dataFolio.vehiculo.tipoVehiculo != null
            ? dataFolio.vehiculo.tipoVehiculo
            : "---"
        );

        //seccion de datos Area 4 Notificacion de folio GNP pantalla de seguimiento GNP
        $("#folioGNPNotify").val(dataFolio.folioAsignacion);
      },
      error: function (e) {
        console.log(e);
      },
    });
  });

  //funcion para convertir de una epoca a fecha
  function epochToJsDate(ts) {
    let epoch = new Date(parseInt(ts));
    let date = epoch.toLocaleDateString();

    //let datetoEpoch = jsDateToEpoch(epoch);
    //console.log(datetoEpoch);
    return date;
  }

  //funcion para convertir de una fecha a epoca
  function jsDateToEpoch(d) {
    var myDate = new Date(d); // Your timezone!
    var myEpoch = myDate.getTime() / 1000.0;

    return myEpoch;
  }
});
