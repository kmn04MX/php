let dataTableOptions = {
    dom: 'Bfltrip',//oden de los botones del datatable
    buttons: [
        {
            extend: 'excelHtml5',
            text: '<i class="fas fa-file-excel"></i> ',
            titleAttr: 'Exportar a Excel',
            className: 'btn btn-success',
        },
        /*{
            extend: 'pdfHtml5',
            text: '<i class="fas fa-file-pdf"></i> ',
            titleAttr: 'Exportar a PDF',
            className: 'btn btn-danger',
        },
        /*{
            extend: 'print',
            text: '<i class="fa fa-print"></i> ',
            titleAttr: 'Imprimir',
            className: 'btn btn-info',
        },*/
    ],
    lengthMenu: [5, 10, 15, 20, 100, 200, 500],
    columnDefs: [
        { className: 'centered', targets: "_all" },
        { orderable: false, targets: "_all" },
        { searchable: false, targets: [21] },
        /*{
            "data": null,
            "defaultContent": "<button class='btn btn-sm btn-warning'><i class='fa-solid fa-pencil'></i></button>",
            "targets": -1
        }*/
    ],
    scrollX: true,
    scrollY: 500,
    pageLength: 10,
    destroy: true,
    language: {
        processing: 'Procesando...',
        lengthMenu: 'Mostrar _MENU_ registros',
        zeroRecords: 'No se encontraron resultados',
        emptyTable: 'Ningún dato disponible en esta tabla',
        infoEmpty: 'Mostrando registros del 0 al 0 de un total de 0 registros',
        infoFiltered: '(filtrado de un total de _MAX_ registros)',
        search: 'Buscar:',
        infoThousands: ',',
        loadingRecords: 'Cargando...',
        paginate: {
            first: 'Primero',
            last: 'Último',
            next: 'Siguiente',
            previous: 'Anterior',
        },
        aria: {
            sortAscending: ': Activar para ordenar la columna de manera ascendente',
            sortDescending: ': Activar para ordenar la columna de manera descendente',
        },
        buttons: {
            copy: 'Copiar',
            colvis: 'Visibilidad',
            collection: 'Colección',
            colvisRestore: 'Restaurar visibilidad',
            copyKeys:
                'Presione ctrl o u2318 + C para copiar los datos de la tabla al portapapeles del sistema. <br /> <br /> Para cancelar, haga clic en este mensaje o presione escape.',
            copySuccess: {
                1: 'Copiada 1 fila al portapapeles',
                _: 'Copiadas %ds fila al portapapeles',
            },
            copyTitle: 'Copiar al portapapeles',
            csv: 'CSV',
            excel: 'Excel',
            pageLength: {
                '-1': 'Mostrar todas las filas',
                _: 'Mostrar %d filas',
            },
            pdf: 'PDF',
            print: 'Imprimir',
            renameState: 'Cambiar nombre',
            updateState: 'Actualizar',
            createState: 'Crear Estado',
            removeAllStates: 'Remover Estados',
            removeState: 'Remover',
            savedStates: 'Estados Guardados',
            stateRestore: 'Estado %d',
        },
        autoFill: {
            cancel: 'Cancelar',
            fill: 'Rellene todas las celdas con <i>%d</i>',
            fillHorizontal: 'Rellenar celdas horizontalmente',
            fillVertical: 'Rellenar celdas verticalmentemente',
        },
        decimal: ',',
        searchBuilder: {
            add: 'Añadir condición',
            button: {
                0: 'Constructor de búsqueda',
                _: 'Constructor de búsqueda (%d)',
            },
            clearAll: 'Borrar todo',
            condition: 'Condición',
            conditions: {
                date: {
                    after: 'Despues',
                    before: 'Antes',
                    between: 'Entre',
                    empty: 'Vacío',
                    equals: 'Igual a',
                    notBetween: 'No entre',
                    notEmpty: 'No Vacio',
                    not: 'Diferente de',
                },
                number: {
                    between: 'Entre',
                    empty: 'Vacio',
                    equals: 'Igual a',
                    gt: 'Mayor a',
                    gte: 'Mayor o igual a',
                    lt: 'Menor que',
                    lte: 'Menor o igual que',
                    notBetween: 'No entre',
                    notEmpty: 'No vacío',
                    not: 'Diferente de',
                },
                string: {
                    contains: 'Contiene',
                    empty: 'Vacío',
                    endsWith: 'Termina en',
                    equals: 'Igual a',
                    notEmpty: 'No Vacio',
                    startsWith: 'Empieza con',
                    not: 'Diferente de',
                    notContains: 'No Contiene',
                    notStartsWith: 'No empieza con',
                    notEndsWith: 'No termina con',
                },
                array: {
                    not: 'Diferente de',
                    equals: 'Igual',
                    empty: 'Vacío',
                    contains: 'Contiene',
                    notEmpty: 'No Vacío',
                    without: 'Sin',
                },
            },
            data: 'Data',
            deleteTitle: 'Eliminar regla de filtrado',
            leftTitle: 'Criterios anulados',
            logicAnd: 'Y',
            logicOr: 'O',
            rightTitle: 'Criterios de sangría',
            title: {
                0: 'Constructor de búsqueda',
                _: 'Constructor de búsqueda (%d)',
            },
            value: 'Valor',
        },
        searchPanes: {
            clearMessage: 'Borrar todo',
            collapse: {
                0: 'Paneles de búsqueda',
                _: 'Paneles de búsqueda (%d)',
            },
            count: '{total}',
            countFiltered: '{shown} ({total})',
            emptyPanes: 'Sin paneles de búsqueda',
            loadMessage: 'Cargando paneles de búsqueda',
            title: 'Filtros Activos - %d',
            showMessage: 'Mostrar Todo',
            collapseMessage: 'Colapsar Todo',
        },
        select: {
            cells: {
                1: '1 celda seleccionada',
                _: '%d celdas seleccionadas',
            },
            columns: {
                1: '1 columna seleccionada',
                _: '%d columnas seleccionadas',
            },
            rows: {
                1: '1 fila seleccionada',
                _: '%d filas seleccionadas',
            },
        },
        thousands: '.',
        datetime: {
            previous: 'Anterior',
            next: 'Proximo',
            hours: 'Horas',
            minutes: 'Minutos',
            seconds: 'Segundos',
            unknown: '-',
            amPm: ['AM', 'PM'],
            months: {
                0: 'Enero',
                1: 'Febrero',
                10: 'Noviembre',
                11: 'Diciembre',
                2: 'Marzo',
                3: 'Abril',
                4: 'Mayo',
                5: 'Junio',
                6: 'Julio',
                7: 'Agosto',
                8: 'Septiembre',
                9: 'Octubre',
            },
            weekdays: ['Dom', 'Lun', 'Mar', 'Mie', 'Jue', 'Vie', 'Sab'],
        },
        editor: {
            close: 'Cerrar',
            create: {
                button: 'Nuevo',
                title: 'Crear Nuevo Registro',
                submit: 'Crear',
            },
            edit: {
                button: 'Editar',
                title: 'Editar Registro',
                submit: 'Actualizar',
            },
            remove: {
                button: 'Eliminar',
                title: 'Eliminar Registro',
                submit: 'Eliminar',
                confirm: {
                    _: '¿Está seguro que desea eliminar %d filas?',
                    1: '¿Está seguro que desea eliminar 1 fila?',
                },
            },
            error: {
                system:
                    'Ha ocurrido un error en el sistema (<a target="\\" rel="\\ nofollow" href="\\">Más información&lt;\\/a&gt;).</a>',
            },
            multi: {
                title: 'Múltiples Valores',
                info: 'Los elementos seleccionados contienen diferentes valores para este registro. Para editar y establecer todos los elementos de este registro con el mismo valor, hacer click o tap aquí, de lo contrario conservarán sus valores individuales.',
                restore: 'Deshacer Cambios',
                noMulti:
                    'Este registro puede ser editado individualmente, pero no como parte de un grupo.',
            },
        },
        info: 'Mostrando _START_ a _END_ de _TOTAL_ registros',
        stateRestore: {
            creationModal: {
                button: 'Crear',
                name: 'Nombre:',
                order: 'Clasificación',
                paging: 'Paginación',
                search: 'Busqueda',
                select: 'Seleccionar',
                columns: {
                    search: 'Búsqueda de Columna',
                    visible: 'Visibilidad de Columna',
                },
                title: 'Crear Nuevo Estado',
                toggleLabel: 'Incluir:',
            },
            emptyError: 'El nombre no puede estar vacio',
            removeConfirm: '¿Seguro que quiere eliminar este %s?',
            removeError: 'Error al eliminar el registro',
            removeJoiner: 'y',
            removeSubmit: 'Eliminar',
            renameButton: 'Cambiar Nombre',
            renameLabel: 'Nuevo nombre para %s',
            duplicateError: 'Ya existe un Estado con este nombre.',
            emptyStates: 'No hay Estados guardados',
            removeTitle: 'Remover Estado',
            renameTitle: 'Cambiar Nombre Estado',
        },
    },
    //instruccion para pintar la fila en base a una validacion
    "createdRow": function (row, data, index) {

        if (data[53] == "P" || data[53] == "p") {
            $('td', row).css({
                'background-color': 'rgba(255, 136, 120, 0.918)',
                'color': 'white'
            });
        }
    }
};
$(document).ready(function () {
    var t = $('#tablaAsistencias').DataTable(dataTableOptions);
    var tbConsulta = $('#tablaConsulta').DataTable(dataTableOptions);

    var contDatosOk = 0;//variable contador de datos completados
    var contDatosP = 0;//contador de datos pendientes
    var exportarDatos = [];//variable que almacena los datos para eportarlos

    setTimeout(function () {
        $('body').addClass('loaded');
    }, 1000);

    $('#submit').click(importarDatos);
    $('#consult').click(consultData);

    function importarDatos() {

        var file_data = $('#file-1').prop('files')[0];
        var form_data = new FormData();
        form_data.append('file', file_data);

        //console.log(form_data);
        if (file_data != undefined) {
            $.ajax({
                url: '../app/readExcel.php', // <-- point to server-side PHP script 
                dataType: 'json', // <-- what to expect back from the PHP script, if anything
                cache: false,
                contentType: false,
                processData: false,
                data: form_data,
                type: 'POST',
                beforeSend: function (data) {
                    $("#mensajeCarga").show();
                    $('#tablaResFiltro').hide();
                    $('#response').hide();
                    $("#total-registros").hide();
                    $('#tablaDatos').hide();
                    $('#descargas').hide();
                    $('#filtroFecha').hide();
                    
                    contDatosOk = 0;
                    contDatosP = 0;
                },
                success: function (data) {
                    
                    arrayDatos = Object.values(data.datos);
                    //limpiar variable datos a exportar
                    exportarDatos = [];
                    t.clear();
                    $("#mensajeCarga").hide();
                    $('#contenedor-Tabla').show();
                    $('#tablaDatos').show();//funcion que inicie el datatable
                    $('#tDatos').html(data.total_datos_importado);
                    $("#total-registros").show();
                    //$('#descargas').show();
                    $('#file-1').val('');
                    consumoAsistencia(arrayDatos);
                },
                error: function (e) {
                    console.log(e);
                }
            });
        } else {
            $('#tablaDatos').hide();
            $('#tablaResFiltro').hide();
            $('#response').show();
            $('#response').html('<p style="color:red;  font-weight:bold;"> No se ha cargado ningun archivo.');
        }
    }

    function consumoAsistencia(arrayDatos) {

        if (!arrayDatos.length) {
            return console.log('Se registraron todos los datos');
        } else {
            let registro = [];
            registro = arrayDatos.shift();

            var parametros = {
                "registros": registro
            };
            $.ajax({
                url: '../app/controllers/datos_controller.php',
                type: 'POST',
                dataType: "JSON",
                data: { datos: JSON.stringify(parametros.registros) },
                beforeSend: function (data) {
                    $("#mensajeCarga").show();//mostrar loader
                    $('#descargas').hide();
                    t.clear();
                },
                success: function (data) {
                    $("#mensajeCarga").hide();
                    agregarFila(data.datos);
                    contadorDatos(data.datos);
                    $("#tdAceptado").html(contDatosOk);
                    $("#tdPendiente").html(contDatosP);
                    $('#descargas').show();
                },
                error: function (e) {
                    alert("algunos registros cuentan con inconsistencias: campos vacios");
                    //console.log(e);
                }
            });
            consumoAsistencia(arrayDatos);

        }

    }

    function contadorDatos(asistencia) {
        //console.log(asistencia[26]);
        if (asistencia[26] === 'P' || asistencia[26] === 'p') {
            //console.log("pendiente");
            contDatosP += 1;
        } else {
            //console.log("completado");
            contDatosOk += 1;
        }
    }

    function agregarFila(asistencia) {
        let row = [];
        
        asistencia.forEach((objeto, index) => {
            //console.log(index);
            if (index === 23) {
                //console.log("agregar atributos");
                asistencia[23].forEach((atributo, index) => {
                    row.push(atributo['value']);
                    //console.log(atributo['value']);
                });

            } else {
                row.push(objeto);
            }
        });
        //console.log(row);
        exportarDatos.push(row);

        t.row.add(row).draw(false);
    }

    function consultData() {
        $('#file-1').val('');
        let opcion = '';
        let fecha = $("#fecha").val();

        var parametros = {
            "opcion": opcion,
            "fecha": fecha
        };

        $.ajax({
            url: '../app/filtrar_datos.php',
            type: 'POST',
            dataType: 'json',
            data: { datos: JSON.stringify(parametros) },
            beforeSend: function (data) {
                $("#total-registros").hide();
                $('#tablaDatos').hide();
            },

            success: function (data) {

                //console.log(data.data);
                $('#tablaDatos').hide();
                $("#mensajeCarga").hide();
                $('#descargas').hide();
                $('#contenedor-Tabla').show();
                $('#filtroFecha').show();
                $('#tablaResFiltro').show();
                $('#file-1').val('');
                tbConsulta.clear();
                if (!data.data.length) {
                    //console.log("sindatos");
                    alert("No se encontraron datos");
                    //tbConsulta.clear().rows.add([]).draw();
                } else {
                    
                    data.data.forEach((user, index) => {
                        //console.log(user);
                        tbConsulta.row.add(user).draw(false);
                        //tbConsulta.clear().row.add(user).draw(false);
                    });
                }
            },
            error: function (e) {
                alert(e.value);
                console.log(e);
            }
        });

    }

    $("#filtrar").on("click", function (e) {
        //console.log("consultar por fecha")
        $('#file-1').val('');
        let opcion = 'byFecha';
        let fecha = $("#fecha").val();

        var parametros = {
            "opcion": opcion,
            "fecha": fecha
        };

        $.ajax({
            url: '../app/filtrar_datos.php',
            type: 'POST',
            dataType: 'json',
            data: { datos: JSON.stringify(parametros) },
            beforeSend: function (data) {
                contDatosOk = 0;
                contDatosP = 0;
            },
            success: function (data) {
                //console.log(data.data);
                $('#tablaDatos').hide();
                $("#mensajeCarga").hide();
                $('#total-registros').show();
                $('#contenedor-Tabla').show();
                $('#filtroFecha').show();
                $('#tablaResFiltro').show();
                $('#descargas').show();
                $('#file-1').val('');
                $('#tDatos').html(data.tDatos);
                if (!data.data.length) {
                    //console.log("sindatos");
                    alert("No se encontraron datos");
                    tbConsulta.clear().rows.add([]).draw();
                }
                tbConsulta.clear();
                data.data.forEach((user, index) => {
                    //console.log(user);
                    if (user[53] === 'P') {//cambiar la posicion si en dado caso se agregan mas atributos
                        contDatosP += 1;
                    } else {
                        contDatosOk += 1;
                    }
                    tbConsulta.row.add(user).draw(); // Redraw the DataTable
                });
                $("#tdAceptado").html(contDatosOk);
                $("#tdPendiente").html(contDatosP);

            },
            error: function (e) {
                //alert(e.value);
                console.log(e);
            }
        });
    });

    $('#completados').on("click", function (e) {
        let exportarDatosC = [];
        let fechaFiltro = $("#fecha").val();
        let today = new Date();
        let now = today.toLocaleDateString('es-MX');
        // obtener la fecha de hoy en formato `MM/DD/YYYY`
        //console.log(exportarDatos);

        exportarDatos.forEach((dato, index) => {
            if (dato[53] === 'C') {
                exportarDatosC.push(exportarDatos[index]);
                contDatosOk += 1;
            }
        });
        const json = JSON.stringify(exportarDatosC);
        console.log(json);
        var form_data = new FormData();
        form_data.append('fecha', fechaFiltro);
        form_data.append('data', json);

        fetch("../app/exportar_si_pasaron.php",
            {
                method: "POST",
                body: form_data
            })
            .then(response => response.blob())
            .then(data => {
                const url = window.URL.createObjectURL(new Blob([data]));
                const link = document.createElement("a");
                link.href = url;
                link.setAttribute("download", "Acuse_Creados-" + now + ".xlsx");
                document.body.appendChild(link);
                link.click();
            })

    });

    $('#pendientes').on("click", function (e) {

        let exportarDatosP = [];
        let fechaFiltro = $("#fecha").val();
        let today = new Date();
        let now = today.toLocaleDateString('es-MX');
        // obtener la fecha de hoy en formato `MM/DD/YYYY`
        exportarDatos.forEach((dato, index) => {
            //console.log(dato);
            if (dato[53] === 'P') {//cambiar la posicion si en dado caso se agregan mas atributos
                exportarDatosP.push(exportarDatos[index]);
                contDatosP += 1;
            }
        });
        const json = JSON.stringify(exportarDatosP);

        var form_data = new FormData();
        form_data.append('fecha', fechaFiltro);
        form_data.append('data', json);



        fetch("../app/exportar_no_pasaron.php",
            {
                method: "POST",
                body: form_data
            })
            .then(response => response.blob())
            .then(data => {
                const url = window.URL.createObjectURL(new Blob([data]));
                const link = document.createElement("a");
                link.href = url;
                link.setAttribute("download", "Acuse_Pendientes-" + now + ".xlsx");
                document.body.appendChild(link);
                link.click();
            })
    });

    function loaderF(statusLoader) {
        //console.log(statusLoader);
        if (statusLoader) {
            $("#loaderFiltro").show();
            //$("#loaderFiltro").html('<img class="img-fluid" src="assets/img/cargando.svg" style="left:50%; right: 50%; width:50px;">');
        } else {
            $("#loaderFiltro").hide();
        }
    }

});
